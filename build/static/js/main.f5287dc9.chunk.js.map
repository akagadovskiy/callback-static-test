{"version":3,"sources":["ServerConfig.js","DetailModal.js","App.js","index.js"],"names":["defaultConfigValues","requestCallButtonText","phoneNumberInputPlaceholderText","phoneNumberInputDefaultCountry","scheduleCallCheckboxText","scheduleCallTimePlaceholerTest","communicationPlatforms","showCommunicationMethods","modalTitle","prefferedCommunicationMethod","successMessage","getServerConfig","a","Promise","resolve","CustomPhoneInput","React","forwardRef","props","ref","type","initialState","phone","scheduleCall","communicationMethod","leading","requestButtonDisabled","validationError","scheduleDatetime","DetailModal","useState","state","setState","config","serverConfig","requestCall","loading","reject","setTimeout","close","centered","visible","show","onCancel","onOk","title","footer","key","onClick","message","style","justify","span","gutter","align","alignItems","offset","placeholder","value","inputComponent","defaultCountry","onChange","smartCaret","Group","buttonStyle","e","target","Object","entries","map","Button","label","checked","_","defaultValue","scheduleDateTime","showTime","format","App","setShow","setServerConfig","handleClick","useEffect","keys","length","container","document","createElement","classList","body","appendChild","ReactDOM","render","StrictMode","getElementsByClassName"],"mappings":"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","file":"static/js/main.f5287dc9.chunk.js","sourcesContent":["export const defaultConfigValues = {\n    requestCallButtonText: 'Request a call',\n    phoneNumberInputPlaceholderText: 'Enter a phone number',\n    phoneNumberInputDefaultCountry: 'US',\n    scheduleCallCheckboxText: 'Schedule a call',\n    scheduleCallTimePlaceholerTest: 'Select time',\n    communicationPlatforms: {\n        'phone': 'Phone',\n        'whatpsapp': 'WhatsApp',\n        'viber': 'Viber',\n        'telegram': 'Telegram',\n    },\n    showCommunicationMethods: true,\n    modalTitle: 'Request a callback',\n    prefferedCommunicationMethod: 'Preffered communication method:',\n    successMessage: 'Thank you! We\\ll get back to you soon.',\n};\n\nexport const getServerConfig = async () => {\n    return new Promise(resolve => resolve(defaultConfigValues))\n};","import React,{useState, useRef} from \"react\";\nimport {Button, Modal, Input, Checkbox, DatePicker, Radio, Row, Col, Form, Alert} from \"antd\";\nimport PhoneInput from 'react-phone-number-input';\n\n\nexport const CustomPhoneInput = React.forwardRef((props, ref) => {\n    return (\n        <Input type=\"text\"\n               {...props}\n               ref={ref}\n        />\n    );\n});\n\nconst initialState = {\n    phone: '',\n    scheduleCall: false,\n    communicationMethod: 'phone',\n    leading: false,\n    requestButtonDisabled: false,\n    validationError: '',\n    scheduleDatetime: '',\n};\n\nexport const DetailModal = (props) => {\n    const [state, setState] = useState(initialState);\n\n    const config = props.serverConfig;\n\n    const requestCall = () => {\n\n        if (!state.phone) {\n            setState({...state, validationError: 'Please enter your phone number'})\n            return;\n        }\n\n        setState({...state, loading: true, validationError: ''});\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n\n                setState({\n                    ...state,\n                    loading: false,\n                    requestButtonDisabled: true,\n                });\n                resolve(true);\n\n            }, 1000)\n        });\n    };\n\n    const close = () => {\n        props.close();\n        setState(initialState);\n    }\n\n    const layout = {\n        labelCol: {span: 8},\n        wrapperCol: {span: 16},\n    };\n    const tailLayout = {\n        wrapperCol: {offset: 8, span: 16},\n    };\n\n    return (\n        <>\n            <Modal centered={'true'} visible={props.show} onCancel={close} onOk={requestCall} title={config.modalTitle}\n                   footer={[\n                       <Button key={'close'} onClick={close}>Close</Button>,\n                       <>{\n                           !state.requestButtonDisabled &&\n                           <Button\n                               key={'submit'}\n                               type={'primary'}\n                               loading={state.loading}\n                               onClick={requestCall}\n                           >\n                               {config.requestCallButtonText}\n                           </Button>\n                       }</>\n                   ]}>\n                {state.requestButtonDisabled ?\n                    <Alert type={'success'} message={config.successMessage} style={{'text-align': 'center'}}/> :\n                    <Row justify={'center'}>\n                        <Col span={18}>\n                            <Row gutter={[8, 8]} justify={'center'} align={'top'}\n                                 type=\"flex\"\n                                 style={{alignItems: \"center\"}}\n                            >\n                                <Col span={24} offset={0}>\n                                    <PhoneInput\n                                        placeholder={config.phoneNumberInputPlaceholderText}\n                                        value={state.phone}\n                                        inputComponent={CustomPhoneInput}\n                                        defaultCountry={config.phoneNumberInputDefaultCountry}\n                                        onChange={phone => {\n                                            setState({...state, phone})\n                                        }}\n                                        smartCaret={false}\n                                    />\n                                </Col>\n\n\n                                <Col span={12} offset={0}></Col>\n                                <Col span={24} offset={0}>\n                                    Preferred communication method:\n                                </Col>\n                                <Col span={24} offset={0}>\n                                    <Radio.Group\n                                        buttonStyle={'solid'}\n                                        onChange={e => {\n                                            setState({...state, communicationMethod: e.target.value});\n                                        }}\n                                        value={state.communicationMethod}>\n                                        defaultValue={'phone'}\n                                        {Object.entries(config.communicationPlatforms).map(([key, value]) => (\n                                            <Radio.Button value={key} key={key}>{value}</Radio.Button>\n                                        ))}\n                                    </Radio.Group>\n                                </Col>\n\n\n                                <Col span={24} offset={0}>\n                                    <Checkbox\n                                        label={config.scheduleCallCheckboxText}\n                                        checked={state.scheduleCall}\n                                        onChange={_ => {\n                                            setState({...state, scheduleCall: !state.scheduleCall});\n                                        }}\n                                    >{config.scheduleCallCheckboxText}</Checkbox>\n                                </Col>\n\n                                {\n                                    state.scheduleCall ?\n                                        <>\n                                            <Col span={24} offset={0}>\n                                                <DatePicker\n                                                    defaultValue={state.scheduleDateTime}\n                                                    placeholder={config.scheduleCallTimePlaceholerTest}\n                                                    onChange={e => setState({...state, scheduleDatetime: e})}\n                                                    showTime={{format: 'HH:mm'}}\n                                                />\n                                            </Col>\n\n                                        </>\n                                        : null\n                                }\n\n\n                                <Col span={24}>\n                                    {state.validationError &&\n                                        <Alert type={'error'} message={state.validationError}/>\n                                    }\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                }\n\n\n            </Modal>\n        </>\n    )\n};\n\nexport default DetailModal;","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport 'react-phone-number-input/style.css'\nimport {getServerConfig} from \"./ServerConfig\";\nimport DetailModal from \"./DetailModal\";\nimport {Button} from 'antd';\n\nfunction App() {\n  const [show, setShow] = useState(false);\n  /** @defaultConfigValues */\n  const [serverConfig, setServerConfig] = useState({});\n\n  const handleClick = () => setShow(!show);\n\n  useEffect(() => {\n    (async () => {\n      const config = await getServerConfig();\n\n      setServerConfig(config);\n    })();\n\n    return () => setServerConfig({});\n  }, []);\n\n  if (Object.keys(serverConfig).length === 0) {\n    return <></>;\n  }\n\n  return (\n      <>\n        <DetailModal\n            show={show}\n            close={handleClick}\n            serverConfig={serverConfig}\n        />\n        <Button\n            onClick={handleClick}\n        >{serverConfig.requestCallButtonText}</Button>\n      </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nconst className = 'callback-button-container';\nconst container = document.createElement('div');\ncontainer.classList = [className];\n\ndocument.body.appendChild(container);\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>\n    , document.getElementsByClassName(className)[0]\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}